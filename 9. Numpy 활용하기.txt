# 넘파이와 판다스

#테이블 모양의 데이터를 다루는데 유리하다.



#Numpy 는 Numerical Python의 줄임말
#행렬, 수치 계산 등 데이터를 다루기 쉽게 도와주는 라이브러리이다

#고성능의 과학 계산 컴퓨팅과 데이터 분석에 필요한 라이브러리


#Pandas 는 Panel Dataes의 줄임말
#테이블 형태의 데이터를 다루기 쉽게 도와주는 라이브러리
#csv,html, sql 등 다양한 데이터를 읽을 수 있다.



#리스트보다 numpy array를 이용한다면 연산 속도가 30~40배까지 차이가 나기도 함
#c언어로 구현된 파이썬 라이브러리이기 떄문에

#차원 ( 대괄호로 한번 -> 1차원, 2개로 중첩되면 2차원....)





import numpy as np

#1차원 배열 생성하기
a=np.array([1,2,3,4,5]) # np.array 안에 리스트를 넣으면 변환이 가능 (투플,배열 가능)
print(type(a))
print(a)

print()

#2차원 배열 생성하기
b=np.array([[1,2,3,],[4,5,6]])
print(type(b))
print(b)


print()



l_list=[[1,2,3],[4,5,6]]
b=np.array(l_list)
print(type(b))
print(b)




# 배열의 차원 및 크기 확인
# ndim 및 shape 속성으로 출력하기
print(b.ndim)    # 배열의 차원을 알려줌 
print(b.shape)   # 배열의 크기를 알려줌







# ndarray 초기화

#np.array ( 리스트 넣는 방법 ) 외에 알아보도록 하겠다


# 0을 채워넣으면서 초기화
a=3
b=5
np.zeros(shape=(a,b))
print()

np.zeros((a,b))





np.zeros(shape=(a,b),dtype=int,order='C')





c=4
np.full((a,b),c)  # a,b 를 c로 채워라







np.ones((a,b)) # 1로 채워라





np.eye(a) # a*a 크기 배열 생성해서 대각선에 쭈욱 긋기



c=np.eye(3,4)
c


# 슬라이싱


a=np.array([1,2,3,4,5])

a[1:4]



#연산 - 동일한 인덱스에 위치한 요소끼리 곱셈
# c=np.multiply(a,b)와 동일

a=np.array([1,2,3])
b=np.array([4,5,6])

c=a*b
c


c=a-b
c



# 넘파이와 리스트의 차이

# 넘파이는 넘파이 array 끼리 사친 연산이 가능하지만, 리스트는 덧셈만 가능

c=[1,2,3,4]
d=[5,6,7,8]

print(a+b)  # 넘파이 배열은 각 인덱스 값이 더해지지만,
print(c+d)  # 파이썬 리스트는 그냥 배열끼리 합쳐진다 ( 뺄셈 곱셈 나눗셈시 에러)




# 추가적 요소

a+5 # 모든 인덱스에 연산이 한 숫자에대해 가능


#파이썬 리스트에 비해 문법이 간단하고 성능이 뛰어남 



